#+TITLE: Pipetrace FIFO Schema Specification
#+AUTHOR: jwalsh
#+DATE: 2025-07-05

* Overview

This document specifies the schema and contract for the data passed through the FIFO interface in the pipetrace tool. The FIFO acts as the communication channel between the traced application and the trace visualizer.

* Data Format

All data transmitted through the FIFO is formatted as JSON objects, one per line. Each line represents a single trace event.

* Event Types

There are three primary event types:

1. ~enter~ - Function entry
2. ~exit~ - Normal function exit
3. ~exception~ - Function exit due to exception

* Schema Definition

Each event follows this JSON schema:

#+begin_src json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "required": ["timestamp", "type", "function"],
  "properties": {
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "ISO 8601 formatted timestamp of the event"
    },
    "type": {
      "type": "string",
      "enum": ["enter", "exit", "exception"],
      "description": "The type of trace event"
    },
    "function": {
      "type": "string",
      "description": "Name of the function being traced"
    },
    "elapsed": {
      "type": "number",
      "description": "Execution time in seconds (only for exit/exception events)"
    },
    "caller": {
      "type": "object",
      "description": "Information about the caller (only for enter events)",
      "properties": {
        "function": {
          "type": "string",
          "description": "Name of the caller function"
        },
        "filename": {
          "type": "string",
          "description": "File containing the caller"
        },
        "lineno": {
          "type": "integer",
          "description": "Line number of the call site"
        }
      },
      "required": ["function", "filename", "lineno"]
    },
    "exception": {
      "type": "object",
      "description": "Information about the exception (only for exception events)",
      "properties": {
        "type": {
          "type": "string",
          "description": "Exception type name"
        },
        "message": {
          "type": "string",
          "description": "Exception message"
        }
      },
      "required": ["type", "message"]
    }
  }
}
#+end_src

* Example Events

** Function Entry

#+begin_src json
{
  "timestamp": "2025-07-04T18:45:32.123456",
  "type": "enter",
  "function": "calculate_something",
  "caller": {
    "function": "process_data",
    "filename": "/path/to/example.py",
    "lineno": 26
  }
}
#+end_src

** Normal Function Exit

#+begin_src json
{
  "timestamp": "2025-07-04T18:45:32.654321",
  "type": "exit",
  "function": "calculate_something",
  "elapsed": 0.531
}
#+end_src

** Exception Function Exit

#+begin_src json
{
  "timestamp": "2025-07-04T18:45:32.789123",
  "type": "exception",
  "function": "process_data",
  "elapsed": 1.254,
  "exception": {
    "type": "ValueError",
    "message": "Random processing error occurred"
  }
}
#+end_src

* Contract

** Writer (Traced Application)

The application being traced must:

1. Create the FIFO if it doesn't exist
2. Format events as valid JSON according to the schema
3. Write each event as a single line to the FIFO
4. Flush the FIFO after each write
5. Handle FIFO write errors gracefully
6. Clean up the FIFO on exit

** Reader (Visualizer)

The trace visualizer must:

1. Check for the existence of the FIFO before reading
2. Read the FIFO line by line
3. Parse each line as JSON
4. Handle JSON parsing errors gracefully
5. Properly interpret each event type
6. Maintain call stack state for proper visualization
7. Retry reading if the FIFO is temporarily unavailable

* Extension Points

The schema is designed to be extensible for future enhancements:

1. Additional fields can be added to the event objects without breaking compatibility
2. New event types can be added to support more advanced tracing features
3. Custom metadata fields can be included for application-specific information

* Version History

- v1.0 (2025-07-04): Initial schema specification

* Future Considerations

- Binary format for improved performance
- Compression for high-volume tracing
- Support for distributed tracing across multiple processes
- Integration with existing tracing standards (e.g., OpenTelemetry)